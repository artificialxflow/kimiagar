# دستورالعمل‌های جامع برای ویرایشگر هوش مصنوعی کرسر

### اصول اصلی

* **تعادل بین استقلال و احتیاط:** برای کارهای **بزرگ و پیچیده**، مرحله به مرحله پیش برو و اجازه بگیر. برای کارهای **کوچک و ساده**، می‌تونی مستقل عمل کنی.
* **شفافیت و تایید:** **همیشه قبل از هر تغییر** یا اجرای هر دستوری توضیح بده که چه کاری می‌خوای انجام بدی و منتظر تایید کاربر باش.
* **ماژولار بودن:** هر کار رو به مراحل کوچک و قابل مدیریت (ترجیحاً ۲-۳ مرحله) تقسیم کن.
* **تایید پس از حل مشکل:** بعد از حل هر مشکل، **همیشه قبل از ادامه کار** از کاربر تایید بگیر.
* **کانتکست پروژه:** همیشه از وضعیت دقیق پروژه آگاه باش و قبل از شروع هر کار جدید، فایل‌های اصلی رو بررسی کن.

---

### مدیریت پروژه و فایل

* **فقط `todo.md`:** فقط یک فایل **`todo.md`** برای تمام توضیحات، مراحل، مشخصات پروژه (مانند رنگ‌ها و جزئیات) و گزارش‌های حل مشکل ایجاد و به‌روزرسانی کن.
* **`todo.md` به عنوان کانتکست:** قبل از شروع هر کار جدید، **همیشه `todo.md` رو بررسی کن** تا کانتکست کامل رو داشته باشی.
* **به‌روزرسانی `todo.md`:** بعد از اتمام هر کار، **`todo.md` رو به‌روزرسانی کن** و کارهای انجام شده رو تیک بزن و توضیح بده که چه کاری انجام شده.
* **ثبت مشکلات:** تمام مشکلات حل شده رو با جزئیات کامل در `todo.md` ثبت کن.
* **ساختار پروژه:** همیشه ساختار فایل‌ها و پوشه‌ها رو حفظ کن و تغییرات غیرضروری انجام نده.

---

### اجرای کد و دستورات

* **تغییر کد بدون توضیح ممنوع:** **هرگز بدون توضیح** اینکه چه کدی رو و چرا تغییر می‌دی، کد رو تغییر نده.
* **اجرای دستور بدون اجازه ممنوع:** **هرگز بدون اجازه صریح کاربر**، هیچ دستوری رو خودت در ترمینال اجرا نکن.
* **فقط نمایش دستورات:** دستورات رو خودت اجرا نکن. در عوض، **دستورات رو به کاربر نمایش بده** و ازش بخواه که اون‌ها رو در ترمینال خودش اجرا کنه. اگه چند دستور پشت سر هم هست، **همه رو جداگانه با شماره و توضیح مشخص کن** و بعد از هر دستور منتظر تایید کاربر باش.
* **عدم دخالت در گیت:** در عملیات گیت دخالت نکن. کاربر خودش تمام دستورات گیت رو مدیریت می‌کنه.

---

### تعامل و گزارش‌دهی

* **گزارش‌دهی ثابت:** **بعد از هر مرحله**، گزارش بده که چه کاری انجام دادی.
* **مدیریت خطا:** اگه خطایی رخ داد، توضیح بده و راه‌حل پیشنهاد کن.
* **توضیح قبل از مرحله بعدی:** قبل از شروع مرحله بعدی، توضیح بده که مرحله بعدی چیه.
* **مکث بین مراحل:** بین مراحل مکث کن تا توکن تمدید بشه یا کاربر بررسی کنه. اگه توکن تموم شد، از جایی که مونده بودی ادامه بده.
* **کانتکست جامع:** در هر مکالمه جدید، از وضعیت دقیق پروژه آگاه باش.
* **جلوگیری از تکرار:** مطمئن شو که کارهای انجام شده مشخص باشن تا دوباره انجام نشن.
* **پیگیری پیشرفت:** بتونی ببینی کجا موندی و چه کارهایی باقی مونده.

---

### امنیت و کنترل

* **حفاظت از فایل‌های حساس:** **هرگز فایل‌های حساس رو بدون اجازه صریح** تغییر نده.
* **رفع ابهام:** اگه شک داری، **همیشه از کاربر سوال کن**.
* **توصیه به پشتیبان‌گیری:** قبل از تغییرات بزرگ، پشتیبان‌گیری رو توصیه کن.

---

### زبان و جهت‌دهی

* **تنظیمات مربوط به لوکال:** اگه پروژه فارسیه، متن رو فارسی بنویس، راست‌چین کن و از فونت‌های مناسب فارسی استفاده کن. **قبل از تغییر جهت**، نیتت رو توضیح بده.

---

### دستورالعمل‌های عیب‌یابی

* **بهترین شیوه‌های ریدایرکت:**
    * از **`router.push`** استفاده کن.
    * برای زمان‌بندی بهتر در ریدایرکت‌ها، از `setTimeout` با یک تاخیر کوچک (مثلاً ۱۰۰ میلی‌ثانیه) استفاده کن.
    * middleware رو طوری پیکربندی کن که توکن‌ها رو فقط برای API routes چک کنه.
    * احراز هویت سمت کلاینت رو در خود کلاینت مدیریت کن.
* **بهترین شیوه‌های مدیریت تاریخ:**
    * **همیشه قبل از تبدیل تاریخ**، چک کن که فیلد موجود باشه.
    * از بلاک‌های `try-catch` برای تبدیل تاریخ استفاده کن.
    * یک مقدار بازگشتی (fallback value) برای تاریخ‌های نامعتبر در نظر بگیر (مثلاً: `{user.createdAt ? new Date(user.createdAt).toLocaleDateString('fa-IR') : 'نامشخص'}`).
* **محدودیت‌های Middleware:**
    * middleware نمی‌تونه `localStorage` رو بخونه.
    * از middleware فقط برای API routes استفاده کن.
    * برای client routes، خود کلاینت باید احراز هویت رو مدیریت کنه.
    * از هدر `Authorization` فقط برای درخواست‌های API استفاده کن.
* **پایداری `localStorage`:**
    * برای ذخیره توکن‌ها، از یک **نام کلید ثابت** در تمام فایل‌ها استفاده کن.
    * مدیریت خطای قوی برای عملیات `localStorage` اضافه کن.
    * بعد از ذخیره توکن، ذخیره‌سازی اون رو تایید کن.
    * قبل از دسترسی به `localStorage`، بررسی کن که در محیط مرورگر هستی.
    * در صورت نیاز، زمان انقضای JWT رو افزایش بده.
* **اشکال‌زدایی و عیب‌یابی:**
    * برای ردیابی، `console.log` اضافه کن.
    * مدیریت خطای کامل در تمام فایل‌ها رو پیاده‌سازی کن.
    * لاگ‌های اشکال‌زدایی برای API routes رو فعال کن.
    * پایداری توکن رو تایید کن.

---

### مشکلات رایج و راه‌حل‌ها

* **مشکل Refresh و Redirect:**
    * AuthContext باید هم توکن و هم user رو از localStorage بخونه
    * از کامپوننت ProtectedRoute برای client-side authentication استفاده کن
    * middleware فقط برای API routes کار کنه
    * isAuthenticated باید هم user و هم token رو چک کنه

* **مشکل Edge Runtime:**
    * از `dotenv.config()` در Edge Runtime استفاده نکن
    * مستقیماً از `process.env` استفاده کن
    * برای سازگاری با Edge Runtime، پکیج‌های اضافی رو حذف کن

* **مشکل Bootstrap Icons:**
    * از CDN برای Bootstrap Icons استفاده کن
    * در `globals.css` با `@import` اضافه کن
    * از نصب محلی پرهیز کن

* **مشکل فایل‌های JSX:**
    * همیشه از پسوند `.jsx` استفاده کن
    * فایل‌های API routes رو هم به `.jsx` تبدیل کن
    * `next.config.ts` رو برای پشتیبانی از `.jsx` تنظیم کن

---

### پروژه کیمیاگر - ویژگی‌های اصلی

* **هدف:** پلتفرم مدیریت طلا و کیف پول دیجیتال
* **نام:** کیمیاگر (Kimiagar)
* **فریم‌ورک:** Next.js 15+ با App Router
* **احراز هویت:** JWT + bcrypt (بدون NextAuth)
* **دیتابیس:** PostgreSQL (Remote Server)
* **ORM:** Prisma
* **UI Framework:** Tailwind CSS
* **زبان:** فارسی با راست‌چین (RTL)
* **فونت‌ها:** Vazirmatn از Google Fonts
* **صفحه اصلی:** آزاد (بدون احراز هویت)
* **داشبورد:** محافظت شده (نیاز به احراز هویت)
* **محیط:** .env برای تنظیمات
* **فایل‌ها:** همه با پسوند `.tsx` یا `.ts`

---

### احراز هویت - JWT + bcrypt (بدون NextAuth)

* **مطلقاً از NextAuth استفاده نکنم**
* **فقط از JWT + bcrypt استفاده کنم**
* **JWT برای session management**
* **bcrypt برای hash کردن رمز عبور**
* **jsonwebtoken برای تولید و verify کردن JWT**
* **bcryptjs برای hash کردن رمز عبور**
* **API routes برای login/logout/register**
* **Middleware برای محافظت از routes**
* **Context برای مدیریت state کاربر**
* **localStorage برای ذخیره JWT**
* **PostgreSQL برای ذخیره کاربران**
* **ProtectedRoute برای client-side authentication**
* **هرگز NextAuth نصب نکنم**
* **هرگز NextAuth import نکنم**
* **هرگز NextAuth config نکنم**
* **هرگز NextAuth استفاده نکنم**
* **هرگز NextAuth mention نکنم**
* **هرگز NextAuth توصیه نکنم**

---

### استفاده از فایل‌های TypeScript

* **همیشه از پسوند `.tsx` برای کامپوننت‌های React استفاده کنم**
* **فایل‌های API routes رو با پسوند `.ts` ایجاد کنم**
* **فایل‌های `.js` رو به `.ts` یا `.tsx` تبدیل کنم**
* **TypeScript برای type safety و پشتیبانی بهتر IDE**
* **استاندارد Next.js برای فایل‌های TypeScript**
* **Syntax highlighting بهتر در TypeScript**
* **IntelliSense بهتر در TypeScript**

---

### تنظیمات محیط و متغیرها

* **ایجاد .env:** فایل برای متغیرهای محیطی
* **متغیرهای ضروری:** DATABASE_URL, JWT_SECRET
* **متغیرهای اختیاری:** NODE_ENV, PORT, BASE_URL
* **امنیت:** هرگز مقادیر واقعی را در .env قرار نده
* **مستندسازی:** توضیح کامل برای هر متغیر
* **سازگاری با Edge Runtime:** مستقیماً از `process.env` استفاده کن

---

### PostgreSQL و دیتابیس

* **اتصال:** استفاده از Prisma ORM
* **مدل‌ها:** ایجاد User, Wallet, Transaction, Order, Price, Commission, SystemSetting
* **عملیات:** CRUD برای کاربران و تراکنش‌ها
* **امنیت:** hash کردن رمز عبور با bcrypt
* **validation:** بررسی داده‌های ورودی
* **error handling:** مدیریت خطاهای دیتابیس
* **Migration:** استفاده از Prisma migrations

---

### Tailwind CSS و استایل‌ها

* **نصب:** Tailwind CSS 4.x
* **استایل‌ها:** RTL برای فارسی
* **کامپوننت‌ها:** استفاده از کلاس‌های Tailwind
* **responsive:** طراحی واکنش‌گرا
* **customization:** سفارشی‌سازی رنگ‌ها و فونت‌ها
* **Icons:** استفاده از Lucide React برای آیکون‌ها

---

### مدیریت State و Context

* **AuthContext:** برای مدیریت احراز هویت
* **localStorage:** برای ذخیره توکن و اطلاعات کاربر
* **ProtectedRoute:** برای محافظت از صفحات
* **Error Handling:** مدیریت خطاهای localStorage
* **Loading States:** نمایش وضعیت بارگذاری

---

### ساختار پروژه

* **app/:** فایل‌های Next.js App Router
* **components/:** کامپوننت‌های قابل استفاده مجدد
* **contexts/:** Context API ها
* **lib/:** توابع کمکی و تنظیمات
* **hooks/:** Custom hooks
* **prisma/:** مدل‌های دیتابیس و migrations
* **public/:** فایل‌های استاتیک

---

### بهترین شیوه‌های کدنویسی

* **Error Boundaries:** استفاده از error boundaries
* **Loading States:** نمایش loading برای عملیات async
* **Validation:** اعتبارسنجی داده‌های ورودی
* **Security:** امنیت در تمام لایه‌ها
* **Performance:** بهینه‌سازی عملکرد
* **Accessibility:** دسترسی‌پذیری
* **Responsive Design:** طراحی واکنش‌گرا
* **Type Safety:** استفاده کامل از TypeScript

---

### Docker و Deployment

* **Dockerfile:** برای containerization
* **docker-compose.yml:** برای مدیریت سرویس‌ها
* **Health Check:** API برای بررسی وضعیت سرویس
* **Environment Variables:** مدیریت متغیرهای محیطی
* **Production Build:** تنظیمات build برای production

---

### ویژگی‌های خاص پروژه کیمیاگر

* **مدیریت طلا:** خرید و فروش طلا و سکه
* **کیف پول دیجیتال:** مدیریت موجودی ریالی و طلایی
* **قیمت‌های لحظه‌ای:** نمایش قیمت‌های به‌روز
* **تراکنش‌ها:** تاریخچه کامل تراکنش‌ها
* **کمیسیون:** محاسبه خودکار کمیسیون‌ها
* **انتقال:** انتقال بین کیف پول‌ها
* **پروفایل:** مدیریت اطلاعات کاربری

---

این دستورالعمل‌ها چارچوبی واضح و مختصر برای ویرایشگر هوش مصنوعی شما ارائه می‌دهند و اجرای کارآمد و کنترل شده پروژه کیمیاگر رو تضمین می‌کنند. 